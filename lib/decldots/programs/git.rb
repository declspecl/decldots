# typed: strict
# frozen_string_literal: true

require_relative "base"

module Decldots
    module Programs
        # Git configuration program
        class Git < Base
            extend T::Sig

            sig { override.params(options: T::Hash[Symbol, T.untyped]).void }
            def configure(options)
                validate_options(options)

                config_file = File.join(home_directory, ".gitconfig")
                content = generate_git_config(options)
                write_file(config_file, content)
            end

            sig { override.params(options: T::Hash[Symbol, T.untyped]).returns(T::Boolean) }
            def validate_options(options)
                if options[:user_name] && !options[:user_name].is_a?(String)
                    raise ValidationError, "Git user name must be a string"
                end

                if options[:user_email] && !options[:user_email].is_a?(String)
                    raise ValidationError, "Git user email must be a string"
                end

                true
            end

            sig { override.params(options: T::Hash[Symbol, T.untyped]).returns(T::Hash[Symbol, T.untyped]) }
            def diff_configuration(options)
                config_file = File.join(home_directory, ".gitconfig")
                expected_content = generate_git_config(options)

                if file_matches_content?(config_file, expected_content)
                    { action: :no_change, file: config_file }
                else
                    { action: :update, file: config_file, changes: "Git configuration would be updated" }
                end
            end

            private

            sig { params(options: T::Hash[Symbol, T.untyped]).returns(String) }
            def generate_git_config(options)
                config_sections = []

                config_sections << "# Generated by Decldots - #{Time.now}"
                config_sections << ""

                config_sections.concat(generate_user_config(options))

                config_sections.concat(generate_core_config(options))

                config_sections.concat(generate_pull_config(options))

                config_sections.concat(generate_push_config(options))

                config_sections.concat(generate_credential_config(options))

                config_sections.concat(generate_git_aliases(options))

                config_sections.concat(generate_custom_config(options))

                config_sections.join("\n")
            end

            sig { params(options: T::Hash[Symbol, T.untyped]).returns(T::Array[String]) }
            def generate_user_config(options)
                lines = []

                if options[:user_name] || options[:user_email]
                    lines << "[user]"
                    lines << "\tname = #{options[:user_name]}" if options[:user_name]
                    lines << "\temail = #{options[:user_email]}" if options[:user_email]
                    lines << ""
                end

                lines
            end

            sig { params(options: T::Hash[Symbol, T.untyped]).returns(T::Array[String]) }
            def generate_core_config(options)
                lines = ["[core]"]

                editor = options[:editor] || "vim"
                lines << "\teditor = #{editor}"

                autocrlf = options[:autocrlf] || "input"
                lines << "\tautocrlf = #{autocrlf}"

                lines << "\twhitespace = trailing-space,space-before-tab"

                pager = options[:pager] || "less -R"
                lines << "\tpager = #{pager}"

                lines << ""
                lines
            end

            sig { params(options: T::Hash[Symbol, T.untyped]).returns(T::Array[String]) }
            def generate_pull_config(options)
                lines = ["[pull]"]

                lines << if options[:pull_rebase]
                             "\trebase = true"
                         else
                             "\trebase = false"
                         end

                lines << ""
                lines
            end

            sig { params(options: T::Hash[Symbol, T.untyped]).returns(T::Array[String]) }
            def generate_push_config(options)
                lines = ["[push]"]

                default_push = options[:push_default] || "simple"
                lines << "\tdefault = #{default_push}"

                lines << "\tautoSetupRemote = true"

                lines << ""
                lines
            end

            sig { params(options: T::Hash[Symbol, T.untyped]).returns(T::Array[String]) }
            def generate_credential_config(options)
                lines = []

                if options[:credential_helper]
                    lines << "[credential]"
                    lines << "\thelper = #{options[:credential_helper]}"

                    lines << "\tcredentialStore = #{options[:credential_store]}" if options[:credential_store]

                    lines << ""
                end

                if options[:github_username]
                    lines << "[credential \"https://github.com\"]"
                    lines << "\tusername = #{options[:github_username]}"
                    lines << ""
                end

                lines
            end

            sig { params(options: T::Hash[Symbol, T.untyped]).returns(T::Array[String]) }
            def generate_git_aliases(options)
                lines = []

                default_aliases = {
                    "st" => "status",
                    "co" => "checkout",
                    "br" => "branch",
                    "ci" => "commit",
                    "df" => "diff",
                    "lg" => "log --oneline --graph --decorate --all",
                    "last" => "log -1 HEAD",
                    "unstage" => "reset HEAD --",
                    "visual" => "!gitk"
                }

                aliases = default_aliases.merge(options[:aliases] || {})

                if aliases.any?
                    lines << "[alias]"
                    aliases.each do |name, command|
                        lines << "\t#{name} = #{command}"
                    end
                    lines << ""
                end

                lines
            end

            sig { params(options: T::Hash[Symbol, T.untyped]).returns(T::Array[String]) }
            def generate_custom_config(options)
                lines = []

                if options[:default_branch]
                    lines << "[init]"
                    lines << "\tdefaultBranch = #{options[:default_branch]}"
                    lines << ""
                end

                lines << "[merge]"
                merge_tool = options[:merge_tool] || "vimdiff"
                lines << "\ttool = #{merge_tool}"
                lines << ""

                lines << "[diff]"
                lines << "\tcolorMoved = zebra"
                lines << ""

                lines << "[color]"
                lines << "\tui = auto"
                lines << ""

                lines << "[color \"branch\"]"
                lines << "\tcurrent = yellow reverse"
                lines << "\tlocal = yellow"
                lines << "\tremote = green"
                lines << ""

                lines << "[color \"diff\"]"
                lines << "\tmeta = yellow bold"
                lines << "\tfrag = magenta bold"
                lines << "\told = red bold"
                lines << "\tnew = green bold"
                lines << ""

                lines << "[color \"status\"]"
                lines << "\tadded = yellow"
                lines << "\tchanged = green"
                lines << "\tuntracked = cyan"
                lines << ""

                lines
            end
        end
    end
end
