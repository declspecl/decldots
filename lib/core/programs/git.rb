# typed: strict
# frozen_string_literal: true

require_relative "base"

module Decldots
    module Programs
        # Git configuration program
        class Git < Base
            extend T::Sig

            sig { override.params(options: T::Hash[Symbol, T.untyped]).void }
            def configure(options)
                validate_options!(options)

                config_dir = Decldots.dry_run? ? Decldots.dry_run_directory : home_directory
                config_file = File.join(config_dir, ".gitconfig")

                content = generate_git_config(options)
                write_file(config_file, content)
                puts "Wrote config to #{config_file}"
            end

            sig { override.params(options: T::Hash[Symbol, T.untyped]).void }
            def validate_options!(options)
                raise ValidationError, "Git user name must be a string" if options[:user_name] && !options[:user_name].is_a?(String)
                raise ValidationError, "Git user email must be a string" if options[:user_email] && !options[:user_email].is_a?(String)
            end

            sig { override.params(options: T::Hash[Symbol, T.untyped]).returns(T::Hash[Symbol, T.untyped]) }
            def diff_configuration(options)
                expected_config_file = File.join(home_directory, ".gitconfig")
                expected_content = generate_git_config(options)

                if file_matches_content?(expected_config_file, expected_content)
                    { action: :no_change, file: expected_config_file }
                else
                    { action: :update, file: expected_config_file, changes: "Git configuration would be updated" }
                end
            end

            private

            sig { params(options: T::Hash[Symbol, T.untyped]).returns(String) }
            def generate_git_config(options)
                config_sections = []

                config_sections << "# Generated by Decldots - #{Time.now}"
                config_sections << ""

                config_sections.concat(generate_user_config(options))
                config_sections.concat(generate_pull_config(options))
                config_sections.concat(generate_push_config(options))
                config_sections.concat(generate_custom_config(options))

                config_sections.join("\n")
            end

            sig { params(options: T::Hash[Symbol, T.untyped]).returns(T::Array[String]) }
            def generate_user_config(options)
                lines = []

                if options[:user_name] || options[:user_email]
                    lines << "[user]"
                    lines << "\tname = #{options[:user_name]}" if options[:user_name]
                    lines << "\temail = #{options[:user_email]}" if options[:user_email]
                    lines << ""
                end

                lines
            end

            sig { params(options: T::Hash[Symbol, T.untyped]).returns(T::Array[String]) }
            def generate_pull_config(options)
                lines = ["[pull]"]

                lines << "\trebase = #{options[:pull_rebase]}" if options[:pull_rebase]

                lines << ""
                lines
            end

            sig { params(options: T::Hash[Symbol, T.untyped]).returns(T::Array[String]) }
            def generate_push_config(options)
                lines = ["[push]"]

                lines << "\tdefault = #{options[:push_default]}" if options[:push_default]
                lines << "\tautoSetupRemote = true" if options[:auto_setup_remote]

                lines << ""
                lines
            end

            sig { params(options: T::Hash[Symbol, T.untyped]).returns(T::Array[String]) }
            def generate_custom_config(options)
                lines = []

                if options[:default_branch]
                    lines << "[init]"
                    lines << "\tdefaultBranch = #{options[:default_branch]}"
                    lines << ""
                end

                if options[:merge_tool]
                    lines << "[merge]"
                    lines << "\ttool = #{options[:merge_tool]}"
                    lines << ""
                end

                lines
            end
        end
    end
end
