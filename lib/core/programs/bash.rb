# typed: strict
# frozen_string_literal: true

require_relative "base"

module Decldots
    module Programs
        # Bash shell configuration program
        class Bash < Base
            extend T::Sig

            sig { override.params(options: T::Hash[Symbol, T.untyped]).void }
            def configure(options)
                validate_options!(options)

                config_dir = Decldots.dry_run? ? Decldots.dry_run_directory : home_directory
                config_file = File.join(config_dir, ".bashrc")
                content = generate_shell_config(options)
                write_file(config_file, content)
                puts "Wrote config to #{config_file}"
            end

            sig { override.params(options: T::Hash[Symbol, T.untyped]).void }
            def validate_options!(options)
                raise ValidationError, "Shell aliases must be a hash" if options[:aliases] && !options[:aliases].is_a?(Hash)
            end

            sig { override.params(options: T::Hash[Symbol, T.untyped]).returns(T::Hash[Symbol, T.untyped]) }
            def diff_configuration(options)
                expected_config_file = File.join(home_directory, ".bashrc")
                expected_content = generate_shell_config(options)

                if file_matches_content?(expected_config_file, expected_content)
                    { action: :no_change, file: expected_config_file }
                else
                    { action: :update, file: expected_config_file, changes: "Bash configuration would be updated" }
                end
            end

            private

            sig { params(options: T::Hash[Symbol, T.untyped]).returns(String) }
            def generate_shell_config(options)
                config_parts = []

                config_parts << "# Generated by Decldots - #{Time.now}"
                config_parts << ""

                config_parts.concat(generate_bash_options(options))
                config_parts.concat(generate_environment_variables(options[:environment_variables])) if options[:environment_variables]
                config_parts.concat(generate_aliases(options[:aliases])) if options[:aliases]
                config_parts.concat(generate_bash_features(options))

                if options[:shell_init]
                    config_parts << ""
                    config_parts << "# Custom initialization"
                    config_parts << options[:shell_init]
                end

                config_parts.join("\n")
            end

            sig { params(options: T::Hash[Symbol, T.untyped]).returns(T::Array[String]) }
            def generate_bash_options(options)
                lines = []

                lines << "# Bash options"
                lines << "set -o vi"

                if options[:enable_completion]
                    lines << ""
                    lines << "# Enable bash completion"
                    lines << "[ -r /usr/local/etc/profile.d/bash_completion.sh ] && . /usr/local/etc/profile.d/bash_completion.sh"
                end

                lines << ""
                lines
            end

            sig { params(env_vars: T.nilable(T::Hash[T.untyped, T.untyped])).returns(T::Array[String]) }
            def generate_environment_variables(env_vars)
                return [] unless env_vars&.any?

                lines = ["# Environment variables"]
                env_vars.each do |key, value|
                    lines << "export #{key}=\"#{value}\""
                end
                lines << ""
                lines
            end

            sig { params(aliases: T.nilable(T::Hash[T.untyped, T.untyped])).returns(T::Array[String]) }
            def generate_aliases(aliases)
                return [] unless aliases&.any?

                lines = ["# Aliases"]
                aliases.each do |name, command|
                    lines << "alias #{name}=\"#{command}\""
                end
                lines << ""
                lines
            end

            sig { params(options: T::Hash[Symbol, T.untyped]).returns(T::Array[String]) }
            def generate_bash_features(options)
                lines = []

                lines << "# Bash-specific features"
                history_size = options[:history_size] || 10_000
                lines << "HISTSIZE=#{history_size}"
                lines << "HISTFILESIZE=#{history_size}"
                lines << "shopt -s histappend"

                lines << ""
                lines
            end
        end
    end
end
