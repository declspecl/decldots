# typed: strict
# frozen_string_literal: true

require_relative "base"

module Decldots
    module Programs
        # Tmux configuration program
        class Tmux < Base
            extend T::Sig

            sig { override.params(options: T::Hash[Symbol, T.untyped]).void }
            def configure(options)
                validate_options!(options)

                config_dir = Decldots.dry_run? ? Decldots.dry_run_directory : home_directory
                config_file = File.join(config_dir, ".tmux.conf")

                content = generate_tmux_config(options)
                write_file(config_file, content)
                puts "Wrote Tmux configuration to #{config_file}"
            end

            sig { override.params(options: T::Hash[Symbol, T.untyped]).void }
            def validate_options!(options)
                if options[:history_limit] && (!options[:history_limit].is_a?(Integer) || options[:history_limit] <= 0)
                    raise ValidationError, "History limit must be a positive integer"
                end

                if options[:base_index] && (!options[:base_index].is_a?(Integer) || options[:base_index] < 0)
                    raise ValidationError, "Base index must be a non-negative integer"
                end

                if options[:status_position] && !%w[top bottom].include?(options[:status_position])
                    raise ValidationError, "Status position must be 'top' or 'bottom'"
                end

                raise ValidationError, "Key bindings must be a hash" if options[:key_bindings] && !options[:key_bindings].is_a?(Hash)

                return unless options[:plugins] && !options[:plugins].is_a?(Array)

                raise ValidationError, "Plugins must be an array"
            end

            sig { override.params(options: T::Hash[Symbol, T.untyped]).returns(T::Hash[Symbol, T.untyped]) }
            def diff_configuration(options)
                expected_config_file = File.join(home_directory, ".tmux.conf")
                expected_content = generate_tmux_config(options)

                if file_matches_content?(expected_config_file, expected_content)
                    { action: :no_change, file: expected_config_file }
                else
                    { action: :update, file: expected_config_file, changes: "Tmux configuration would be updated" }
                end
            end

            private

            sig { params(options: T::Hash[Symbol, T.untyped]).returns(String) }
            def generate_tmux_config(options)
                config_lines = []

                config_lines << "# Generated by Decldots - #{Time.now}"
                config_lines << ""

                config_lines.concat(generate_basic_settings(options))
                config_lines.concat(generate_key_settings(options))
                config_lines.concat(generate_status_settings(options))
                config_lines.concat(generate_key_bindings(options))
                config_lines.concat(generate_plugins_config(options))

                config_lines.join("\n")
            end

            sig { params(options: T::Hash[Symbol, T.untyped]).returns(T::Array[String]) }
            def generate_basic_settings(options)
                lines = []

                if options[:prefix_key]
                    lines << "# Set prefix key"
                    lines << "unbind C-b"
                    lines << "set -g prefix #{options[:prefix_key]}"
                    lines << "bind #{options[:prefix_key]} send-prefix"
                    lines << ""
                end

                if options[:mouse]
                    lines << "# Enable mouse support"
                    lines << "set -g mouse on"
                    lines << ""
                end

                if options[:history_limit]
                    lines << "# Set history limit"
                    lines << "set -g history-limit #{options[:history_limit]}"
                    lines << ""
                end

                if options[:base_index]
                    lines << "# Set base index"
                    lines << "set -g base-index #{options[:base_index]}"
                    lines << "setw -g pane-base-index #{options[:base_index]}"
                    lines << ""
                end

                if options[:clipboard]
                    lines << "# Enable clipboard"
                    lines << "set -g set-clipboard on"
                    lines << ""
                end

                lines
            end

            sig { params(options: T::Hash[Symbol, T.untyped]).returns(T::Array[String]) }
            def generate_key_settings(options)
                lines = []

                if options[:vi_mode]
                    lines << "# Enable vi mode"
                    lines << "setw -g mode-keys vi"
                    lines << ""
                end

                lines
            end

            sig { params(options: T::Hash[Symbol, T.untyped]).returns(T::Array[String]) }
            def generate_status_settings(options)
                lines = []

                if options.key?(:status_bar)
                    lines << "# Status bar configuration"
                    lines << "set -g status #{options[:status_bar] ? "on" : "off"}"
                    
                    lines << "set -g status-position #{options[:status_position]}" if options[:status_position]
                    
                    lines << ""
                end

                lines
            end

            sig { params(options: T::Hash[Symbol, T.untyped]).returns(T::Array[String]) }
            def generate_key_bindings(options)
                lines = []

                if options[:key_bindings] && options[:key_bindings].any?
                    lines << "# Custom key bindings"
                    options[:key_bindings].each do |key, command|
                        lines << "bind #{key} #{command}"
                    end
                    lines << ""
                end

                lines
            end

            sig { params(options: T::Hash[Symbol, T.untyped]).returns(T::Array[String]) }
            def generate_plugins_config(options)
                lines = []

                if options[:plugins] && options[:plugins].any?
                    lines << "# Plugin configuration"
                    options[:plugins].each do |plugin|
                        lines << "set -g @plugin '#{plugin}'"
                    end
                    lines << ""
                    lines << "# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)"
                    lines << "run '~/.tmux/plugins/tpm/tpm'"
                    lines << ""
                end

                lines
            end
        end
    end
end
